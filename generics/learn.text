泛型是Go语言在 1.18 版本中引入的重要特性，它让开发者能够编写更加灵活和可重用的代码
泛型主要通过以下两个核心概念来实现：
1.类型参数（Type Parameters）：允许你在函数或类型定义中使用一个或多个类型作为参数。
2.类型约束（Type Constraints）：指定类型参数必须满足的条件，确保在函数内部可以安全地操作这些类型

类型参数	在函数或类型名后声明，表示待定的类型。	               [T any]
类型约束	定义类型参数必须满足的条件（如支持的操作符或方法） 	    int，float64，comparable，constraints.Ordered，any
any	约束类型参数为任何类型                             	 [T any]
comparable	约束类型参数为可比较的类型	                  [K comparable]

泛型（Generics）允许我们编写不依赖特定数据类型的代码。
在引入泛型之前，如果我们想要处理不同类型的数据，通常需要为每种类型编写重复的函数

泛型函数和类型通过类型参数列表来声明，语法为 [类型参数 约束]
// 基本语法结构
func 函数名[T 约束](参数 T) 返回值类型 {
	// 函数体
}
	
type 类型名[T 约束] struct {
	// 结构体字段
}

类型参数命名约定
通常使用大写字母：T、K、V、E 等
T：表示 Type（类型）
K：表示 Key（键）
V：表示 Value（值）
E：表示 Element（元素）